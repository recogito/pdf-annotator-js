[
  {
    "id": "3b8c5c1d-0432-42c9-82e7-b5770c6c9854",
    "bodies": [],
    "target": {
      "annotation": "3b8c5c1d-0432-42c9-82e7-b5770c6c9854",
      "selector": [
        {
          "quote": "anguage design and implementation, pages 291–300. ACM New York, NY, USA, 1",
          "start": 2404,
          "end": 2478,
          "range": {},
          "offsetReference": {},
          "pageNumber": 14
        }
      ],
      "creator": {
        "isGuest": true,
        "id": "dDkm9PZsUPfohJLEZrZT"
      },
      "created": "2024-02-21T07:09:59.952Z"
    }
  },
  {
    "id": "317adb64-7d66-41bf-9a00-eebbd905fd81",
    "bodies": [],
    "target": {
      "annotation": "317adb64-7d66-41bf-9a00-eebbd905fd81",
      "selector": [
        {
          "quote": "We present a trace-based compilation technique for dynamiclanguages that reconciles speed of compilation with excellent per-formance of the generated machine code. Our system uses a mixed-mode execution approach: the system starts running JavaScript in afast-starting bytecode interpreter. As the program runs, the systemidentiﬁes hot (frequently executed) bytecode sequences, recordsthem, and compiles them to fast native code. We call such a se-quence of instructions a trace",
          "start": 3589,
          "end": 4066,
          "range": {},
          "offsetReference": {},
          "pageNumber": 1
        }
      ],
      "creator": {
        "isGuest": true,
        "id": "nuPGkgB78UAqgmyUysJ1"
      },
      "created": "2023-10-13T07:44:48.598Z"
    }
  },
  {
    "id": "f01a6746-b142-40e3-a12e-b657914e8566",
    "bodies": [],
    "target": {
      "annotation": "f01a6746-b142-40e3-a12e-b657914e8566",
      "selector": [
        {
          "quote": "We solve the nested loop problem by recording nested tracetrees. Our system traces the inner loop exactly as the na¨ıve version.The system stops extending the inner tree when it reaches an outerloop, but then it starts a new trace at the outer loop header. Whenthe outer loop reaches the inner loop header, the system tries to callthe trace tree for the inner loop. If the call succeeds, the VM recordsthe call to the inner tree as part of the outer trace and ﬁnishesthe outer trace as normal. In this way, our system can trace anynumber of loops nested to any depth without causing excessive tailduplication",
          "start": 1366,
          "end": 1974,
          "range": {},
          "offsetReference": {},
          "pageNumber": 2
        }
      ],
      "creator": {
        "isGuest": true,
        "id": "nuPGkgB78UAqgmyUysJ1"
      },
      "created": "2023-10-13T07:45:17.581Z"
    }
  },
  {
    "id": "5cb4d2da-e47c-4b5f-a279-5a348a4f5650",
    "bodies": [],
    "target": {
      "annotation": "5cb4d2da-e47c-4b5f-a279-5a348a4f5650",
      "selector": [
        {
          "end": 7868,
          "offsetReference": {},
          "quote": "Extending a tree. Side exits lead to different paths throughthe loop, or paths with different types or representations. Thus, tocompletely cover the loop, the VM must record traces starting at allside exits. These traces are recorded much like root traces: there isa counter for each side exit, and when the counter reaches a hotnessthreshold, recording starts. Recording stops exactly as for the roottrace, using the loop header of the root trace as the target to reach.",
          "range": {},
          "start": 7397,
          "pageNumber": 5,
          "quadpoints": [
            329.27,
            131.27,
            400.32,
            131.27,
            400.32,
            141.78,
            329.27,
            141.78,
            397.82,
            131.9,
            400.32,
            131.9,
            400.32,
            140.88,
            397.82,
            140.88,
            401.62,
            131.9,
            556.78,
            131.9,
            556.78,
            140.88,
            401.62,
            140.88,
            317.33,
            121.92,
            556.69,
            121.92,
            556.69,
            130.89,
            317.33,
            130.89,
            317.33,
            111.93,
            556.83,
            111.93,
            556.83,
            120.91,
            317.33,
            120.91,
            317.33,
            102.02,
            556.69,
            102.02,
            556.69,
            111,
            317.33,
            111,
            317.33,
            92.03,
            556.83,
            92.03,
            556.83,
            101.01,
            317.33,
            101.01,
            317.33,
            82.05,
            556.83,
            82.05,
            556.83,
            91.03,
            317.33,
            91.03,
            317.33,
            72.06,
            554.35,
            72.06,
            554.35,
            81.04,
            317.33,
            81.04
          ]
        },
        {
          "end": 322,
          "offsetReference": {},
          "quote": "Our implementation does not extend at all side exits. It extendsonly if the side exit is for a control-ﬂow branch, and only if the sideexit does not leave the loop. In particular we do not want to extenda trace tree along a path that leads to an outer loop, because wewant to cover such paths in an outer tree through tree",
          "range": {},
          "start": 0,
          "pageNumber": 6,
          "quadpoints": [
            66.04,
            710.18,
            293.56,
            710.18,
            293.56,
            719.16,
            66.04,
            719.16,
            54.03,
            700.2,
            293.53,
            700.2,
            293.53,
            709.17,
            54.03,
            709.17,
            54.03,
            690.21,
            293.54,
            690.21,
            293.54,
            699.19,
            54.03,
            699.19,
            54.03,
            680.22,
            293.53,
            680.22,
            293.53,
            689.2,
            54.03,
            689.2,
            54.03,
            670.31,
            244.73,
            670.31,
            244.73,
            679.29,
            54.03,
            679.29
          ]
        }
      ],
      "created": "2024-09-03T10:45:50.849Z",
      "updated": "2024-09-03T10:45:52.814Z"
    }
  }
]